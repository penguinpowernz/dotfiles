# scans the given network for live hosts
function scan {
  fping -ag $1 2>/dev/null
}

function lsnet {
  scan $1
}

# Gives some chopped down CPU info
function cpuinfo {
  cat /proc/cpuinfo|grep -P 'processor|MHz|model name|cache size'|sed 's/processor/\nprocessor/'
}

# Checks the syntax of all the ruby files in the current and sub dirs
rcheck() {
  find . -name \*.rb -exec ruby -c {} \;
}

svc() {
  sudo service $*;
}


# Shows all the SSH connections both out (ssh) and in (sshd)
where() {
  netstat -pn 2>/dev/null|grep ssh|tr -s ' ' ' ' |cut -d' ' -f4-|sed 's/ESTABLISHED //'|column -t;
}

# Make apt-get quicker
agi() {
  sudo apt-get install $*
}

ags() {
  apt-cache search $*
}

agp() {
  apt-file search $*
}

agu() {
  sudo apt-get update;
  sudo apt-file update;
}


# Git stuff
gclo() {
  git clone $*;
}

# GIT PULL CURRENT BRANCH
glb() {
  CB=`git branch |grep "\*" |tr -d '* '`;
  git pull origin $CB;
}

# GIT PUSH CURRENT BRANCH
gpb() {
  CB=`git branch |grep "\*" |tr -d '* '`;
  git push origin $CB;
}

# Log a command
function logit() {
    local to_file="$1"
    shift
    if [ -z "$to_file" ]; then
        echo "Need a file to log to." 2>&1
        return 1
    elif [ -z "$*" ]; then
        echo "Need a command to run." 2>&1
        return 1
    fi

    echo "DATE: $(date)" > "$to_file"
    echo "DIR: $(pwd)" >> "$to_file"
    echo "CMD: $*" >> "$to_file"
    echo "OUTPUT:" >> "$to_file"
    echo >> $to_file
    eval "$@ 2>&1 | tee -a '$to_file'"
    return $?
}


epoch() {
  [[ -z "$1" ]] && date +%s && return 0;

  if [[ "$1" =~ '^[0-9]+$' ]]; then
    echo "$1" | ruby -pne '$_ = Time.at($_.to_i)'
    echo ""
  else
    echo $1 | ruby -rtime -pne '$_ = Time.parse($_).to_i'
    echo ""
  fi
}


qr() {
  qrencode  -s 10 -t PNG -o - "$1" | display
}



ctrlp() {
  dir="$(find -type d|grep -vP '^\./\..*'| grep -v node_modules|fzf)";
  [[ -d "$dir" ]] && cd $dir;
  zle reset-prompt  
}

zle -N ctrlp
bindkey "^p" ctrlp




jcat() {
  cat $1 | json_pp
}

jless() {
  cat $1 | json_pp | less
}

zless() {
  zcat $1 | less
}

zgrep() {
  zcat $1 | grep "$@"
}


dbpath() {
  [[ -L /data ]] && sudo unlink /data;
  sudo ln -s "$(readlink -f $1)" /data;
}
